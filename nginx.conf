worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;

        location = /upstream/servers {
            default_type text/plain;
            content_by_lua_block {
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_primary_peers = upstream.get_primary_peers
                local get_upstreams = upstream.get_upstreams
                local upstream_name = ngx.var.arg_upstream_name
                local status = ngx.var.arg_status

                local srvs, err = get_primary_peers(upstream_name)
                if not srvs then
                    ngx.say("failed to get servers in upstream ", upstream_name)
                else
                    for _, srv in ipairs(srvs) do
                        if status == "down" and srv.down == true then
                            ngx.print(srv.name)
                            ngx.print("\n")
                        end
                        if status == "up" and srv.down == nil then
                            ngx.print(srv.name)
                            ngx.print("\n")
                        end
                        if status == nil then
                            ngx.print(srv.name)
                            ngx.print("\n")
                        end
                    end
                end
            }
        }

        location = /upstream/servers/down {
            default_type text/plain;
            content_by_lua_block {
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_primary_peers = upstream.get_primary_peers
                local get_upstreams = upstream.get_upstreams
                local upstream_name = ngx.var.arg_upstream_name
                local servers = ngx.var.arg_servers

                local srvs, err = get_primary_peers(upstream_name)
                if not srvs then
                    ngx.say("failed to get servers in upstream ", u)
                else
                    for i, srv in ipairs(srvs) do
                        if string.find(servers, srv.name) then
                            upstream.set_peer_down(upstream_name, false, i - 1, true)
                        end
                    end
                    ngx.say("ok")
                end
            }
        }

        location = /upstream/servers/up {
            default_type text/plain;
            content_by_lua_block {
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams
                local upstream_name = ngx.var.arg_upstream_name
                local servers = ngx.var.arg_servers

                local srvs, err = get_servers(upstream_name)
                if not srvs then
                    ngx.say("failed to get servers in upstream ", u)
                else
                    for i, srv in ipairs(srvs) do
                        if string.find(servers, srv.name) then
                            upstream.set_peer_down(upstream_name, false, i - 1, false)
                        end
                    end
                    ngx.say("ok")
                end
            }
        }
    }

    include vhost/*.conf;
    include upstream/*.conf;
}
