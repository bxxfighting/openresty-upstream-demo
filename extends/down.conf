server {
    listen 8080;
    set $token "123456";
    set $white_list '["172.16.16.212", "127.0.0.1"]';

    default_type application/json;

    location = /upstream/servers/down {
        lua_need_request_body on;
        content_by_lua_block {
            local xlb = ngx.shared.xlb;

            local cjson = require "cjson"
            local upstream = require "ngx.upstream"
            local get_primary_peers = upstream.get_primary_peers
            local request_method = string.upper(ngx.var.request_method)
            local down_servers = {}

            local result_data = {}
            result_data["code"] = 0
            result_data["msg"] = "ok"
            result_data["data"] = {}

            if request_method == "POST" then
                local data = ngx.req.get_body_data()
                data = cjson.decode(data)
                local upstream_name = data.upstream_name
                if upstream_name == nil or upstream_name == "" then
                    result_data["code"] = 10000
                    result_data["msg"] = "参数不正确"
                    ngx.say(cjson.encode(result_data))
                    ngx.exit(200)
                end
                local servers = data.servers
                if servers == nil or servers == "" then
                    result_data["code"] = 10000
                    result_data["msg"] = "参数不正确"
                    ngx.say(cjson.encode(result_data))
                    ngx.exit(200)
                end
                local srvs = get_primary_peers(upstream_name)

                for i, srv in ipairs(srvs) do
                    if string.find(servers, srv.name) then
                        upstream.set_peer_down(upstream_name, false, i - 1, false)
                        if xlb:get(srv.name) != true then
                          xlb:incr(upstream_name, 1, 0)
                          xlb:set(srv.name, true)
                        end
                        table.insert(down_servers, srv.name)
                    end
                end
                result_data["data"]["servers"] = down_servers
                ngx.say(cjson.encode(xlb:get(upstream_name)))
            end
        }
    }

    location = /upstream/servers/up {
        lua_need_request_body on;
        content_by_lua_block {
            local xlb = ngx.shared.xlb;
            local cjson = require "cjson"
            local upstream = require "ngx.upstream"
            local get_primary_peers = upstream.get_primary_peers
            local get_upstreams = upstream.get_upstreams
            local request_method = string.upper(ngx.var.request_method)
            local up_servers = {}
            local result_data = {}
            result_data["code"] = 0
            result_data["msg"] = "ok"
            result_data["data"] = {}

            if request_method == "POST" then
                local data = ngx.req.get_body_data()
                data = cjson.decode(data)
                local upstream_name = data.upstream_name
                if upstream_name == nil or upstream_name == "" then
                    result_data["code"] = 10000
                    result_data["msg"] = "参数不正确"
                    ngx.say(cjson.encode(result_data))
                    ngx.exit(200)
                end
                local servers = data.servers
                if servers == nil or servers == "" then
                    result_data["code"] = 10000
                    result_data["msg"] = "参数不正确"
                    ngx.say(cjson.encode(result_data))
                    ngx.exit(200)
                end
                local srvs = get_primary_peers(upstream_name)

                for i, srv in ipairs(srvs) do
                    if string.find(servers, srv.name) then
                        upstream.set_peer_down(upstream_name, false, i - 1, false)
                        if xlb:get(srv.name) != false then
                          xlb:incr(upstream_name, -1, 0)
                          ngx.say(xlb:get(upstream_name))
                          xlb:set(srv.name, false)
                        end
                        table.insert(up_servers, srv.name)
                    end
                end
                result_data["data"]["servers"] = up_servers
                ngx.say(cjson.encode(xlb:get(upstream_name)))
            end
        }
    }
}
